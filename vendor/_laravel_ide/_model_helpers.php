<?php

namespace App\Models {

	/**
	 * App\Models\BaiViet
	 *
	 * @property string $status
	 * @property string $ngay_tao
	 * @property string|null $hinh_anh
	 * @property string $noi_dung
	 * @property string $tieu_de
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereTieuDe($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNoiDung($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereHinhAnh($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNgayTao($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereStatus($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet query()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static BaiViet|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static BaiViet|null first(array|string $columns)
	 * @method static BaiViet firstOrFail(array|string $columns, string|null $message)
	 * @method static BaiViet sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<BaiViet>|BaiViet tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class BaiViet extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Banner
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Banner|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Banner|null first(array|string $columns)
	 * @method static Banner firstOrFail(array|string $columns, string|null $message)
	 * @method static Banner sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Banner>|Banner tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Banner extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ChiNhanh
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $trang_thai
	 * @property int $quan_ly_id
	 * @property string $dia_chi
	 * @property string $ten_chi_nhanh
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereTenChiNhanh($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereDiaChi($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereQuanLyId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereTrangThai($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ChiNhanh|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ChiNhanh|null first(array|string $columns)
	 * @method static ChiNhanh firstOrFail(array|string $columns, string|null $message)
	 * @method static ChiNhanh sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ChiNhanh>|ChiNhanh tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ChiNhanh extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\LienHe
	 *
	 * @property string $update_at
	 * @property string $create_at
	 * @property bool $da_phan_hoi
	 * @property string|null $ngay_hen
	 * @property string|null $nguoi_phu_trach
	 * @property string|null $ghi_chu_noi_bo
	 * @property string|null $phan_loai
	 * @property string|null $nguon_goc
	 * @property mixed $muc_do_uu_tien
	 * @property bool $trang_thai
	 * @property string $noi_dung
	 * @property string $so_dien_thoai
	 * @property string $email
	 * @property string $ten
	 * @property int $id
	 * @property-read mixed $priority_label
	 * @property-read mixed $priority_badge
	 * @property-read mixed $formatted_create_at
	 * @property-read mixed $formatted_update_at
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\LienHeActivityLog> $activityLogs
	 * @property-read int|null $activityLogs_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\LienHeNote> $notes
	 * @property-read int|null $notes_count
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereTen($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereEmail($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereSoDienThoai($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNoiDung($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereTrangThai($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereMucDoUuTien($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNguonGoc($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe wherePhanLoai($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereGhiChuNoiBo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNguoiPhuTrach($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNgayHen($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereDaPhanHoi($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereCreateAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereUpdateAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe search()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe status()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe priority()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe category()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe dateRange()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe query()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static LienHe|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static LienHe|null first(array|string $columns)
	 * @method static LienHe firstOrFail(array|string $columns, string|null $message)
	 * @method static LienHe sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHe>|LienHe tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class LienHe extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\LienHeActivityLog
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property array|null $du_lieu_moi
	 * @property array|null $du_lieu_cu
	 * @property string|null $nguoi_thuc_hien
	 * @property string|null $mo_ta
	 * @property string $hanh_dong
	 * @property int $lien_he_id
	 * @property int $id
	 * @property-read mixed $formatted_created_at
	 * @property-read \App\Models\LienHe $lienHe
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereLienHeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereHanhDong($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereMoTa($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNguoiThucHien($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereDuLieuCu($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereDuLieuMoi($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog query()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static LienHeActivityLog|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static LienHeActivityLog|null first(array|string $columns)
	 * @method static LienHeActivityLog firstOrFail(array|string $columns, string|null $message)
	 * @method static LienHeActivityLog sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeActivityLog>|LienHeActivityLog tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class LienHeActivityLog extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\LienHeNote
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string|null $nguoi_tao
	 * @property string $noi_dung
	 * @property int $lien_he_id
	 * @property int $id
	 * @property-read mixed $formatted_created_at
	 * @property-read \App\Models\LienHe $lienHe
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereLienHeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNoiDung($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNguoiTao($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote query()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static LienHeNote|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static LienHeNote|null first(array|string $columns)
	 * @method static LienHeNote firstOrFail(array|string $columns, string|null $message)
	 * @method static LienHeNote sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<LienHeNote>|LienHeNote tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class LienHeNote extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Phim
	 *
	 * @property \Illuminate\Support\Carbon|null $update_at
	 * @property \Illuminate\Support\Carbon $create_at
	 * @property \Illuminate\Support\Carbon|null $deleted_at
	 * @property mixed $trang_thai
	 * @property string|null $do_tuoi
	 * @property string|null $quoc_gia
	 * @property string|null $ngon_ngu
	 * @property string|null $poster
	 * @property string|null $trailer
	 * @property \Illuminate\Support\Carbon|null $ngay_phat_hanh
	 * @property integer|null $thoi_luong
	 * @property string|null $dien_vien
	 * @property string|null $dao_dien
	 * @property string|null $mo_ta
	 * @property string $ten_phim
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TheLoaiPhim> $theLoais
	 * @property-read int|null $theLoais_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereTenPhim($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereMoTa($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereDaoDien($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereDienVien($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereThoiLuong($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNgayPhatHanh($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereTrailer($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim wherePoster($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNgonNgu($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereQuocGia($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereDoTuoi($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereTrangThai($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereDeletedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereCreateAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereUpdateAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Phim|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Phim|null first(array|string $columns)
	 * @method static Phim firstOrFail(array|string $columns, string|null $message)
	 * @method static Phim sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Phim>|Phim tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Phim extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\PhimTheLoai
	 *
	 * @property int $the_loai_phim_id
	 * @property int $phim_id
	 * @property int $id
	 * @property-read \App\Models\Phim $phim
	 * @property-read \App\Models\TheLoaiPhim $theLoaiPhim
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai wherePhimId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereTheLoaiPhimId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai query()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static PhimTheLoai|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static PhimTheLoai|null first(array|string $columns)
	 * @method static PhimTheLoai firstOrFail(array|string $columns, string|null $message)
	 * @method static PhimTheLoai sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<PhimTheLoai>|PhimTheLoai tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class PhimTheLoai extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TheLoaiPhim
	 *
	 * @property \Illuminate\Support\Carbon|null $update_at
	 * @property \Illuminate\Support\Carbon $create_at
	 * @property mixed $trang_thai
	 * @property string|null $mo_ta
	 * @property string $ten_the_loai
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Phim> $phims
	 * @property-read int|null $phims_count
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereTenTheLoai($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereMoTa($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereTrangThai($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereCreateAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereUpdateAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TheLoaiPhim|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TheLoaiPhim|null first(array|string $columns)
	 * @method static TheLoaiPhim firstOrFail(array|string $columns, string|null $message)
	 * @method static TheLoaiPhim sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TheLoaiPhim>|TheLoaiPhim tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TheLoaiPhim extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\User
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string|null $remember_token
	 * @property string $password
	 * @property \Illuminate\Support\Carbon|null $email_verified_at
	 * @property string $email
	 * @property string $name
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
	 * @property-read int|null $notifications_count
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static User|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static User|null first(array|string $columns)
	 * @method static User firstOrFail(array|string $columns, string|null $message)
	 * @method static User sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class User extends \Illuminate\Foundation\Auth\User
	{
		//
	}

	/**
	 * App\Models\VaiTro
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro query()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static VaiTro|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro cloneForPaginationCount()
	 * @method static array withoutSelectAliases()
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro mergeBindings()
	 * @method static array cleanBindings()
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro wherePastOrFuture(array|string $columns, string $operator, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro orWhereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static VaiTro|null first(array|string $columns)
	 * @method static VaiTro firstOrFail(array|string $columns, string|null $message)
	 * @method static VaiTro sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<VaiTro>|VaiTro tap(callable $callback)
	 * @method static mixed pipe(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class VaiTro extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

}

